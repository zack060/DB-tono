// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package discord_Table

import (
	"context"
	"log"
)

const getDiscordGatewayEvents = `-- name: GetDiscordGatewayEvents :many
SELECT id, type, content, author_id, author_username, author_global_name, author_avatar, author_banner_color, attachments, embeds, mentions, mention_roles, pinned, mention_everyone, tts, timestamp, edited_timestamp, flags, components, nonce, referenced_message, invite_link, invite_by, campaign_name, campaign_id, role_gain, role_loss, event_name, event_created, event_location, event_description, event_time, is_event_start, is_event_end, channel_id, guild_id, position, discord_type, system, stickers, webhook_id, application_id, activity, interaction, mention_channels, guild_joined_timestamp, member_premium_since, member_nickname, membership_screening_pending, communication_disabled_until_timestamp, user_id, member_avatar_hash, member_display_name, roles, member_avatar_url, member_display_avatar_url, role_icon, role_unicode_emoji, role_id, role_color, role_position, separately_categorized, mentionable, managed_by_integration, role_permissions, message_id, update_content, reaction_me, reaction_users, reaction_count, reaction_emoji_id, bot, discriminator, tag, emoji_id, emoji_name, emoji_animated, emoji_requires_colons, emoji_managed, emoji_available, emoji_created_timestamp, emoji_url, emoji_identifier, sticker_id, sticker_description, sticker_type, sticker_format, sticker_name, sticker_pack_id, sticker_tags, sticker_available, sticker_sort_value, thread_id, thread_type, thread_messages, thread_members, thread_flags, thread_name, thread_parent_id, thread_locked, thread_invitable, thread_archived, thread_auto_archive_duration, thread_archive_timestamp, thread_last_message_id, thread_last_pin_timestamp, thread_rate_limit_per_user, thread_message_count, thread_member_count, thread_total_message_sent, thread_applied_tags, thread_created_timestamp, thread_is_newly_created, channel_type, channel_parent_id, channel_permission_overwrites, channel_messages, channel_threads, nsfw, channel_name, channel_raw_position, channel_topic, channel_last_message_id, channel_rate_limit_per_user, event_id, event_start_time, event_end_time, event_privacy_level, event_status, event_entity_type, event_user_count, event_image, server_deaf, server_mute, self_deaf, self_mute, self_video, voice_session_id, voice_streaming, request_to_speak_timestamp, old_voice_state, stage_instance_id, stage_instance_topic, discovery_disabled, invite_code, invite_temporary, invite_max_age, invite_max_uses, invite_target_user, invite_target_application, invite_target_type, invite_stage_instance, invite_guild_scheduled_event, invite_expires_timestamp, reactions, user_banner_hash, user_banner_url, user_accent_color, user_hex_accent_color, user_default_avatar_url, user_verified, user_mfa_enabled, user_created_timestamp, presence_status, presence_activities, presence_desktop_status, presence_mobile_status, presence_web_status, thread_members_joined, thread_members_left
FROM discord_gateway_events
`

func (q *Queries) GetDiscordGatewayEvents(ctx context.Context, limit int, offset int) ([]DiscordGatewayEvent, error) {
	const query = `SELECT * FROM discord_gateway_events ORDER BY id LIMIT $1 OFFSET $2`

	// Log the query and its parameters
    log.Printf("Executing SQL query: %s; Parameters: %d, %d", query, limit, offset)

	rows, err := q.db.QueryContext(ctx, query, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// Get the column names from the rows
	columns, _ := rows.Columns()

	// Count the number of rows
	rowCount := 0
	var items []DiscordGatewayEvent
	for rows.Next() {
		rowCount++

		var i DiscordGatewayEvent
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Content,
			&i.AuthorID,
			&i.AuthorUsername,
			&i.AuthorGlobalName,
			&i.AuthorAvatar,
			&i.AuthorBannerColor,
			&i.Attachments,
			&i.Embeds,
			&i.Mentions,
			&i.MentionRoles,
			&i.Pinned,
			&i.MentionEveryone,
			&i.Tts,
			&i.Timestamp,
			&i.EditedTimestamp,
			&i.Flags,
			&i.Components,
			&i.Nonce,
			&i.ReferencedMessage,
			&i.InviteLink,
			&i.InviteBy,
			&i.CampaignName,
			&i.CampaignID,
			&i.RoleGain,
			&i.RoleLoss,
			&i.EventName,
			&i.EventCreated,
			&i.EventLocation,
			&i.EventDescription,
			&i.EventTime,
			&i.IsEventStart,
			&i.IsEventEnd,
			&i.ChannelID,
			&i.GuildID,
			&i.Position,
			&i.DiscordType,
			&i.System,
			&i.Stickers,
			&i.WebhookID,
			&i.ApplicationID,
			&i.Activity,
			&i.Interaction,
			&i.MentionChannels,
			&i.GuildJoinedTimestamp,
			&i.MemberPremiumSince,
			&i.MemberNickname,
			&i.MembershipScreeningPending,
			&i.CommunicationDisabledUntilTimestamp,
			&i.UserID,
			&i.MemberAvatarHash,
			&i.MemberDisplayName,
			&i.Roles,
			&i.MemberAvatarUrl,
			&i.MemberDisplayAvatarUrl,
			&i.RoleIcon,
			&i.RoleUnicodeEmoji,
			&i.RoleID,
			&i.RoleColor,
			&i.RolePosition,
			&i.SeparatelyCategorized,
			&i.Mentionable,
			&i.ManagedByIntegration,
			&i.RolePermissions,
			&i.MessageID,
			&i.UpdateContent,
			&i.ReactionMe,
			&i.ReactionUsers,
			&i.ReactionCount,
			&i.ReactionEmojiID,
			&i.Bot,
			&i.Discriminator,
			&i.Tag,
			&i.EmojiID,
			&i.EmojiName,
			&i.EmojiAnimated,
			&i.EmojiRequiresColons,
			&i.EmojiManaged,
			&i.EmojiAvailable,
			&i.EmojiCreatedTimestamp,
			&i.EmojiUrl,
			&i.EmojiIdentifier,
			&i.StickerID,
			&i.StickerDescription,
			&i.StickerType,
			&i.StickerFormat,
			&i.StickerName,
			&i.StickerPackID,
			&i.StickerTags,
			&i.StickerAvailable,
			&i.StickerSortValue,
			&i.ThreadID,
			&i.ThreadType,
			&i.ThreadMessages,
			&i.ThreadMembers,
			&i.ThreadFlags,
			&i.ThreadName,
			&i.ThreadParentID,
			&i.ThreadLocked,
			&i.ThreadInvitable,
			&i.ThreadArchived,
			&i.ThreadAutoArchiveDuration,
			&i.ThreadArchiveTimestamp,
			&i.ThreadLastMessageID,
			&i.ThreadLastPinTimestamp,
			&i.ThreadRateLimitPerUser,
			&i.ThreadMessageCount,
			&i.ThreadMemberCount,
			&i.ThreadTotalMessageSent,
			&i.ThreadAppliedTags,
			&i.ThreadCreatedTimestamp,
			&i.ThreadIsNewlyCreated,
			&i.ChannelType,
			&i.ChannelParentID,
			&i.ChannelPermissionOverwrites,
			&i.ChannelMessages,
			&i.ChannelThreads,
			&i.Nsfw,
			&i.ChannelName,
			&i.ChannelRawPosition,
			&i.ChannelTopic,
			&i.ChannelLastMessageID,
			&i.ChannelRateLimitPerUser,
			&i.EventID,
			&i.EventStartTime,
			&i.EventEndTime,
			&i.EventPrivacyLevel,
			&i.EventStatus,
			&i.EventEntityType,
			&i.EventUserCount,
			&i.EventImage,
			&i.ServerDeaf,
			&i.ServerMute,
			&i.SelfDeaf,
			&i.SelfMute,
			&i.SelfVideo,
			&i.VoiceSessionID,
			&i.VoiceStreaming,
			&i.RequestToSpeakTimestamp,
			&i.OldVoiceState,
			&i.StageInstanceID,
			&i.StageInstanceTopic,
			&i.DiscoveryDisabled,
			&i.InviteCode,
			&i.InviteTemporary,
			&i.InviteMaxAge,
			&i.InviteMaxUses,
			&i.InviteTargetUser,
			&i.InviteTargetApplication,
			&i.InviteTargetType,
			&i.InviteStageInstance,
			&i.InviteGuildScheduledEvent,
			&i.InviteExpiresTimestamp,
			&i.Reactions,
			&i.UserBannerHash,
			&i.UserBannerUrl,
			&i.UserAccentColor,
			&i.UserHexAccentColor,
			&i.UserDefaultAvatarUrl,
			&i.UserVerified,
			&i.UserMfaEnabled,
			&i.UserCreatedTimestamp,
			&i.PresenceStatus,
			&i.PresenceActivities,
			&i.PresenceDesktopStatus,
			&i.PresenceMobileStatus,
			&i.PresenceWebStatus,
			&i.ThreadMembersJoined,
			&i.ThreadMembersLeft,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}

	// Log the number of rows and columns
	log.Printf("Query returned %d rows and %d columns", rowCount, len(columns))

	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

